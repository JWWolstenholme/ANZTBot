// Created with Todo+ VSCode extension  
Todo: 
  Improvements:
    Registering feature:
      ☐ Remove print()'s and maybe replace with some form of logging
        Maybe log successful registrations in a discord channel for organisers
      ✘ Add a way to see, and maybe communicate in the bot's dms @cancelled(21-04-02 07:58)
      ☐ Add a method for staff to sign up
      Improve the user experience:
        ✔ Improve the user feedback on http://osuanzt.com/register @done(21-03-22 04:24)
          Design simple pages for:
            These ended up just being one template used in a template engine
            ✔ Invalid URL parameters @done(21-03-22 04:24)
            ✔ Couldn't communicate with discord bot @done(21-03-22 04:24)
            ✔ Bot couldn't finish OAuth process @done(21-03-22 04:24)
            ✔ Successfully registered @done(21-03-22 04:24)
          ✔ Send whether or not the OAuth process was successfull back to the web server to give feedback to the user @done(21-03-16 07:39)
        ✔ Allow for the user to signify they want to register by either messaging the bot or reacting to a certain message @done(21-03-19 05:10)
        ✔ Use an embed to send the user the OAuth link so they don't see the ugly URL. @done(21-03-13 00:52)
      ✔ Get that web server working with https @done(21-03-12 22:12)
      ✔ Persist the final osu and discord IDs of registered users somewhere so organisers can use it @done(21-03-16 07:40)
      ✔ Add a way to easily export the signups @done(21-04-02 07:57)
      ✔ Reject signups from users with the wrong flag @done(21-03-19 05:51)
    ✔ Utilise a resources cog to store and share resources that need to be used in multiple cogs, eg. database connection @done(21-03-31 01:02)
      Undecided as to whether to include utility functions like those found in resources.py  
    ☐ Check if stream is live using webhooks instead of REST calls
    ☐ Allow reporting of forfeited matches
      Maybe allow for reporting a reason
    ☐ Consider allowing the use of !delete from #referees to delete a bot's message in #match-results.
    ☐ Allow for proper parsing of lobbies that continued past the match was over. For showmatches of other maps in the pool for exmaple
    ☐ Allow for matches that take place over more than one lobby
    ✔ When reporting match results, include the reff in the footer instead of reporter. @done(21-01-30 02:08)
    ✔ Improve handling of empty cells in mappool picking spreadsheet @done(20-01-25 01:31)
      Fixed when spreadsheet scraping was updated for ANZT7S
    ✔ Get bot working on diony.live @started(19-08-19 04:57) @done(19-08-19 06:22) @lasted(1h25m37s)
      Server was stuck in a situation where it couldn't update it's package list. Switched to a new Ubuntu distro instead of Debain
    ✔ Get bot starting on boot on diony.live @done(19-09-01 00:46)
      See 'crontab -e'
    ✘ Show more info in user popout when stream is live like thumbnail and game. @cancelled(20-01-27 17:44)
      Not possible due to limitations for bots
    ✔ Use a new design for result embeds @done(20-01-30 04:53)
    ✔ Use the spreadsheet to get results, instead of requiring referee input @done(20-01-30 04:53)
    ✔ Allow matches to be reported before the mp has closed @done(20-02-09 03:49)
    ✔ Allow for bot interactions from the #referee channel instead of the public #results channel @done(20-02-23 03:48)
      Added special case to allow for match reporting from #referee. No other changes
    Refactor:
      ☐ use GitHub issues instead of this file.
      ✔ Use discord.ext.commands instead of crazy regex https://discordpy.readthedocs.io/en/latest/ext/commands/index.html @started(19-08-19 19:18) @done(19-09-04 22:23) @lasted(2w2d3h5m42s)
        Had to compromise and change result command to be invoked with !format
      ✔ Use on_message() and get !format working without having to include "!format" @done(20-01-30 04:53)
        See bashbot for how to do this
      ✔ Use cogs @done(21-01-30 02:08)
        ✔ If cogs allow, add commands for adding and removing cogs from within discord @done(21-01-30 02:08)
      ✘ Refactor the two large methods @cancelled(21-01-30 02:43)
      ✔ Improve error handling. Currently does not catch BadArgument errors for example @done(20-01-25 01:32)
        I was using the on_error event instead of the on_command_error
      ✘ Use .format instead of f-strings @cancelled(20-01-25 01:33)
        f-strings are superior
      ✔ Optimize imports @done(20-02-08 06:27)
      ✔ Allow referees to specify final score @done(19-09-04 22:24)
      ✔ Output match id when outputting match result @done(19-09-04 22:24)
  Features:
    ✔ Registration process utilising osu! oauth to confirm and link player's osu and discord accounts. @done(21-03-12 01:23)
      This can be used, amonsgt other things, to nickname player's in discord to their osu username.
      This also insures that registrations are legitmate as they should require being able to log in to your discord and osu account.
      https://osu.ppy.sh/docs/index.html?bash#authorization-code-grant
      The gist is:
        1. Send the discord user a link to osu!'s oauth gateway with our client id, redirect URI & their discord ID encrypted as the 'state' variable
        2. The user grants us access to their osu! identity
        3. User is redirected to our redirect URI where we now have a code and state variable
        4. Send our client id, client secret & code to exchange for an access token
        5. Use the access token to get the user's osu! id and decrypt the state variable from step 3 to get their discord id.
        ✘ Get a cog to start a web server @cancelled(21-03-12 01:22)
        ✔ Figure out how to encrypt a discord user id to include as the state parameter so we can identify which discord account is being redirected to the callback URI @done(21-03-12 01:22)
        ✔ Implement the authorization code grant oauth flow @done(21-03-12 01:22)
      Alternative approach:
        Suggested because I don't think you can start and stop a flask web server willy-nilly. The loading and caching etc has to be handled by mod_wsgi.
        ✔ Get a static web server set up with apache @done(21-03-12 01:22)
        ✔ When user is sent to that web server, look for a running bot process and send it relevant info somehow @done(21-03-12 01:22)
          Used Python Streams to send the info https://docs.python.org/3/library/asyncio-stream.html#tcp-echo-client-using-streams
    ☐ Allow for editing/reproccesing of previous match reports as opposed to having to delete and redo.
    ☐ Store tournament rules allowing for querying of rules and display all rules in a channel
      Should also display revisions/clarifications to rules
    ☐ Sign up to receive a reminder about certain matches
      Probably requires using a scheduling library and a database or something
    ☐ !pick command which adds the pick to the sheet
    ☐ !say command to make the bot say stuff. Could be funny or used for announcements
    ☐ Integrate some features from https://github.com/LeaPhant/flowabot and find someway to credit it
    ☐ Implement a sort of ticket system for reschedules. Should makes it easier for organisers
      Could indicate that a ticket is open for a match on the sheets to indicate that that time is not final
    ☐ Announce stream on a twitter account
    ✔ !picked command showing all picked maps @done(20-01-25 01:34)
    ✔ Show status as streaming when osuanzt channel is live @done(20-01-25 18:05)
      Could be done via webhook (which might require making a small web server for GET and POST request) or periodic REST calls.
      Implemented with periodeic REST calls
    ✔ Add a stream ping role @done(20-02-23 08:09)
      Will require detecting if the stream is a different stream than the last time the bot checked and allow for users to add themselves to the role
    ✔ !when command to help players identify when their match is regardless of timezone and considering daylight savings. @done(20-03-19 04:46)
    ✔ Handle qualifier lobbies including signing up to lobbies and reffing lobbies using a database @done(20-07-09 07:54)
    Big stuff for future tourneys:
      ☐ Predictions and associated rankings / Pickems
      ☐ Automatic reffing
        CeilingWaffle is working on something that might include this
  Bugs:
    ✔ The loop in twitch-pickem.py appears to continue even when it's containing cog is unloaded. @done(21-02-05 23:49)
      This and the below bug were fixed by switching to using the tasks extension in discord.py
    ✔ The bot sometimes pings multiple times for a stream going live @done(21-02-05 23:49)
      Example: https://discord.com/channels/199158455888642048/199158455888642048/805428678624149544
      This may have been fixed by commit 62386680b8a2106f276221d2bf22e99a396b8603 but I'll leave it here for the record.
      Actually I think this is caused by the above bug. Meaning that after several reloads, there are several loops running.
    ✔ Twitch updated their api authentication to oauth @done(21-01-30 02:08)
    ✔ "https://osu.ppy.sh/mp/54169084 HD2 HR2" and "https://osu.ppy.sh/mp/54169903 NM5 DT2 0" cause key errors @started(19-08-19 03:37) @done(19-08-19 04:22) @lasted(45m9s)
      Caused by maps being aborted
    ✔ "https://osu.ppy.sh/mp/53996635 DT1 HD2" @done(19-08-19 04:29)
      Caused by maps being aborted
    ✘ "https://osu.ppy.sh/mp/53996626 HD1 NM2" @started(19-08-19 04:30) @cancelled(19-08-19 04:42) @wasted(12m9s)
      Caused by player dc, no changes made
    ✔ "https://osu.ppy.sh/community/matches/53994610 HR2 HD2" @started(19-08-19 04:43) @done(19-08-19 04:53) @lasted(10m33s)
      Caused by a bug in regex which where it only checked if an id was present for one type of possible url type
    ✔ Spreadsheet scraping does not work on ANZT7S' new spreadsheet format @done(20-01-25 01:31)
    ✔ The bot dies eventually after hours of running and requires restarting @done(20-01-31 23:19)
      I beleive this was caused by the below error or something to do with error handling that has been fixed
    ✔ The bot can not handle tracebacks greater than just under 2000 characters long @done(20-01-30 21:59)
    ✔ The bot sometimes fails to connect to the twitch api @done(20-01-31 23:19)
      This was caused by timeouts due to my bad internet so It just waits and tries again later now
    ✔ The bot doesn't show any picks for match results @done(20-02-08 05:38)
      This was due to teething issues regarding now having lobbies to test on. It was mostly caused by not converting strings from the api to ints
    ✔ The bot will show a tiebreaker map as if it was picked by the next player @done(20-02-09 04:02)
    ✔ The bot interprets every message starting with it's prefix as a command and throws an error if the command doesn't exist @done(20-02-23 02:41)